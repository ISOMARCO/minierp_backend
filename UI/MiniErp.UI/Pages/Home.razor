@page "/"
@using MiniErp.UI.Components.TableComponent
@using MiniErp.UI.Dtos.Products
<PageTitle>Home</PageTitle>
<ListWithTable  TableParameters="_tableParameters"></ListWithTable>
@code
{
    private ListWithTable<ListProductDto>.TableParameter? _tableParameters;
    //private ListWithCard<ListProductDto>.ListParameter _listParameters;

    protected override void OnInitialized()
    {
        /*_listParameters = new ListWithCard<ListProductDto>.ListParameter
        {
            Controller = "products",
            QueryString = "page=" + Pagination.Page + "&pageSize=" + Pagination.Size,
            TableColumns = new List<string> { "Type", "Note" },
            ItemBodySelector = item => (RenderFragment)(builder =>
            {
                builder.OpenElement(0, "tr");
                builder.OpenElement(1, "td");
                builder.AddContent(2, item.Type);
                builder.CloseElement();
                builder.OpenElement(3, "td");
                builder.AddContent(4, item.Note);
                builder.CloseElement();
                builder.CloseElement();
            })
        };*/
        
        _tableParameters = new ListWithTable<ListProductDto>.TableParameter
        {
            Controller = "products",
            Title = "Products",
            Columns = new List<string> { "Name", "Type", "Note" },
            ItemBodySelector = item => builder =>
            {
                builder.OpenElement(0, "tr");
                builder.AddMarkupContent(1, $@"
                    <td><div class='userDatatable-content'>{item.Name}</div></td>
                    <td><div class='userDatatable-content'>{item.Type}</div></td>
                    <td><div class='userDatatable-content'>{item.Note}</div></td>
                    <td><ul class='orderDatatable_actions mb-0 d-flex flex-wrap'>
                        <li><a href='#'><i class='uil uil-edit'></i></a></li>
                        <li><a href='#'><i class='uil uil-trash-alt'></i></a></li>
                    </ul></td>
                ");
                builder.CloseElement();
            }
        };
    }

    /*private readonly ListWithCard<ListProductDto>.CardParameter _cardParameter = new()
    {
        Title = "Products"
    };
    
    private static class Pagination
    {
        public static int Page { get; set; } = 0;
        public static int Size { get; set; } = 10;
    }

    private readonly List<Modal.FormField> _filterForms = 
    [
        new Modal.FormField
        {
            Name = "Name",
            Placeholder = "Name",
            Label = "Məhsul adı",
            Type = "text"
        },
        new Modal.FormField
        {
            Name = "Type",
            Placeholder = "Type",
            Label = "Məhsul növü",
            Type = "text"
        },
        new Modal.FormField
        {
            Name = "Note",
            Placeholder = "Note",
            Label= "Qeyd",
            Type = "text"
        }
    ];
    
    private readonly List<Modal.FormField> _formFields =
    [
        new Modal.FormField
        {
            ColSize = 6,
            Name = "Name",
            Placeholder = "Name",
            Icon = "fa-solid fa-hammer",
            Type = "text"
        },

        new Modal.FormField
        {
            ColSize = 6,
            Name = "Type",
            Placeholder = "Type",
            Icon = "fa-solid fa-ellipsis-vertical",
            Type = "text"
        },

        new Modal.FormField
        {
            Name = "Note",
            Placeholder = "Note",
            Icon = "fa-regular fa-note-sticky",
            Type = "text"
        }
    ];
    
    private readonly List<Modal.FormField> _updateFormFields =
    [
        new Modal.FormField
        {
            Name = "Id",
            Type = "hidden"
        },
        new Modal.FormField
        {
            ColSize = 6,
            Name = "Name",
            Placeholder = "Name",
            Icon = "fa-solid fa-hammer",
            Type = "text"
        },

        new Modal.FormField
        {
            ColSize = 6,
            Name = "Type",
            Placeholder = "Type",
            Icon = "fa-solid fa-ellipsis-vertical",
            Type = "text"
        },

        new Modal.FormField
        {
            Name = "Note",
            Placeholder = "Note",
            Icon = "fa-regular fa-note-sticky",
            Type = "text"
        }
    ];

    private readonly Modal.ModalParameter _modalParameters = new()
    {
        ModalId = "create-modal",
        ModalTitle = "Product Create",
        ModalSize = "lg",
        SaveButtonText = "Save changes",
        SaveButtonClass = "btn-primary",
        Controller = "products"
    };
    
    private readonly Modal.ModalParameter _updateModalParameters = new()
    {
        ModalId = "edit-modal",
        Method = "put",
        Controller = "products"
    };*/
}
